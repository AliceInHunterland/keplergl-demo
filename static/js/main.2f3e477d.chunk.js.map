{"version":3,"sources":["App.js","serviceWorker.js","index.js","../node_modules/kepler.gl/dist/localization sync /^/.//.*$"],"names":["customizedKeplerGlReducer","keplerGlReducer","initialState","uiState","readOnly","currentModal","mapControls","visibleLayers","show","mapLegend","active","toggle3d","splitMap","reducers","combineReducers","keplerGl","store","createStore","applyMiddleware","taskMiddleware","App","Uploading","Map","id","mapboxApiAccessToken","width","window","innerWidth","height","innerHeight","removeArrayItem","arr","itemToRemove","filter","item","useState","uploadedFiles","setUploadedFiles","fileLimit","setFileLimit","dispatch","useDispatch","myDatasets","className","type","multiple","accept","onChange","e","files","uploaded","limitExceeded","some","file","findIndex","f","name","push","console","log","values","res","wb","ExcelJS","reader","FileReader","readAsArrayBuffer","onload","buffer","result","xlsx","load","then","workbook","worksheet","getWorksheet","lat","Number","getCell","lon","animalsList","i","actualColumnCount","animalName","column","getColumn","splitColumn","slice","colmnSum","x","length","coordinates","join","m","dataset","info","label","data","processCsvData","addDataToMap","datasets","options","centerMap","alert","handleUploadFiles","Array","prototype","call","target","disabled","htmlFor","map","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","resolve","module","exports"],"mappings":"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","file":"static/js/main.2f3e477d.chunk.js","sourcesContent":["// import useSwr from \"swr\";\n// import Uploading from \"./Uploading\";\nimport React, {useState} from \"react\";\nimport keplerGlReducer from \"kepler.gl/reducers\";\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {taskMiddleware} from \"react-palm/tasks\";\nimport {Provider, useDispatch} from \"react-redux\";\nimport KeplerGl from \"kepler.gl\";\nimport {addDataToMap} from \"kepler.gl/actions\";\nimport * as ExcelJS from \"exceljs\";\nimport {processCsvData} from 'kepler.gl/processors';\nimport './uploading.css'\n\nconst MAX_COUNT = 10;\n\nconst customizedKeplerGlReducer = keplerGlReducer\n    .initialState({\n        uiState: {\n            // hide side panel to disallow user customize the map\n            readOnly: false,\n            currentModal: null,\n            // customize which map control button to show\n            mapControls: {\n                visibleLayers: {\n                    show: false\n                },\n                mapLegend: {\n                    show: true,\n                    active: true\n                },\n                toggle3d: {\n                    show: false\n                },\n                splitMap: {\n                    show: false\n                }\n            }\n        }\n    });\n\nconst reducers = combineReducers({\n    keplerGl: customizedKeplerGlReducer,\n});\n\n\nconst store = createStore(reducers, {}, applyMiddleware(taskMiddleware));\n\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <Uploading />\n      <Map />\n    </Provider>\n  );\n}\n\n\n\n\n\n\n\nfunction Map() {\n\n  return (\n    <KeplerGl\n      id=\"covid\"\n      mapboxApiAccessToken='pk.eyJ1IjoiZWt0bGFncmFuemgxIiwiYSI6ImNrczZkd3EwbzAwczkycW96b3ZpbGJuaTMifQ.hVA0mIakF4asjiJmh7gPEA'//{process.env.REACT_APP_MAPBOX_API}\n      width={window.innerWidth}\n      height={window.innerHeight}\n    />\n  );\n\n}\n\nconst removeArrayItem = (arr, itemToRemove) => {\n    return arr.filter(item => item !== itemToRemove)\n}\n\n\n\nfunction Uploading() {\n\n    const [uploadedFiles, setUploadedFiles] = useState([])\n    const [fileLimit, setFileLimit] = useState(false);\n\n\n    const dispatch = useDispatch();\n    const myDatasets = [];\n    const handleUploadFiles = files => {\n\n        const uploaded = [...uploadedFiles];\n        let limitExceeded = false;\n        files.some(async (file) => {\n\n            if (uploaded.findIndex((f) => f.name === file.name) === -1) {\n                uploaded.push(file);\n                console.log('MY FILE', file)\n\n\n                let values = [];\n                let res='latitude,longitude,value,animal';\n                const wb = new ExcelJS.Workbook();\n                const reader = new FileReader()\n\n                reader.readAsArrayBuffer(file)\n                reader.onload = () => {\n                    const buffer = reader.result;\n\n                    wb.xlsx.load(buffer).then(workbook => {\n\n\n                        var worksheet = workbook.getWorksheet(1);\n                        const lat = Number(worksheet.getCell('A2'));\n                        const lon =  Number(worksheet.getCell('B2'));\n                        console.log('LAT',lat)\n                        console.log('LON',lon)\n                        let animalsList = [\"Anthozoa\",\n                            \"Ascidia\",\n                            \"Ascophyllum\",\n                            \"Asterias\",\n                            \"Balanus\",\n                            \"Branchiomma\",\n                            \"Buccinum\",\n                            \"Caridea\",\n                            \"Chionoecetes\",\n                            \"Cnidaria\",\n                            \"Crossaster\",\n                            \"Cryptonatica\",\n                            \"Diopedos bispinis\",\n                            \"Fish\",\n                            \"Fucus\",\n                            \"Gersemia fruticosa\",\n                            \"Gorgonocephalus\",\n                            \"Gymnocanthus tricuspis\",\n                            \"Heliometra\",\n                            \"Hormathia\",\n                            \"Human\",\n                            \"Hyas\",\n                            \"Laminaria_digitata\",\n                            \"Lithothamnion\",\n                            \"Mysis oculata\",\n                            \"Ophiopholis\",\n                            \"Ophiura robusta\",\n                            \"Pagurus pubescens\",\n                            \"Porifera\",\n                            \"Strongylocentrotus\",\n                            \"Trash\",\n                            \"Urasterias\",\n                            \"Urticina\",\n                            \"arenicola\",\n                            \"corophiidae\",\n                            \"none\"];\n\n\n                        for (let i = 7;i<worksheet.actualColumnCount+1;i++){\n                            let animalName;\n                            let column = worksheet.getColumn(i).values;\n                            console.log(\"ONE COLUMN\", column)\n                            animalName = column[4];\n                            let splitColumn = column.slice(5);\n                            console.log(\"ANIMAL\", animalName);\n                            console.log(\"NEXT COLUMN\", splitColumn)\n                            let colmnSum = 0;\n\n\n\n\n                            for(let x =0;x< splitColumn.length;x++){\n                                if(splitColumn[x]!=null){\n                                    console.log(\"VALUE\",splitColumn[x])\n                                    colmnSum= colmnSum+Number(splitColumn[x])\n                                }\n                            }\n\n                            console.log(colmnSum);\n                            // [lat , lon, colmnSum]\n\n                            let coordinates = [lat, lon, colmnSum, animalName].join(\",\");\n                            animalsList = removeArrayItem(animalsList, animalName);\n                            console.log(\"ANIMAL NAME\",animalName);\n                            console.log(\"ANIMAL LIST\",animalsList);\n                            values.push(coordinates);\n\n                        }\n                        for(let m =0; m<animalsList.length;m++){\n                            let coordinates = [lat, lon, '0', animalsList[m]].join(\",\");\n                            values.push(coordinates)\n                        }\n                        res = res+'\\n'+ values.join( '\\n');\n                        console.log(res);\n\n\n                        console.log('here',res)\n\n                        const dataset = {\n                            info: {id: file.name, label: file.name},\n                            data: processCsvData(res)\n                        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                        myDatasets.push(dataset);\n                        dispatch(addDataToMap({\n                            datasets: myDatasets ,\n                            options: {centerMap: true, readOnly: false},\n                        }))\n\n\n\n                    })\n\n                }\n\n\n\n\n\n\n                if (uploaded.length === MAX_COUNT) setFileLimit(true);\n                if (uploaded.length > MAX_COUNT) {\n                    alert(`You can only add a maximum of ${MAX_COUNT} files`);\n                    setFileLimit(false);\n                    limitExceeded = true;\n                    return true;\n                }\n            }\n        })\n        if (!limitExceeded) setUploadedFiles(uploaded)\n\n    }\n\n    const handleFileEvent =  (e) => {\n        const chosenFiles = Array.prototype.slice.call(e.target.files)\n        handleUploadFiles(chosenFiles);\n    }\n\n    return (\n        <div className=\"Uploading\">\n\n            <input id='fileUpload' type='file' multiple\n                   accept='.xlsx, .xls'\n                   onChange={handleFileEvent}\n                   disabled={fileLimit}\n            />\n\n            <label htmlFor='fileUpload'>\n                <a  className={`btn btn-primary ${!fileLimit ? '' : 'disabled' } `}>Upload Files</a>\n            </label>\n\n            <div className=\"uploaded-files-list\">\n                {uploadedFiles.map(file => (\n                    <div >\n                        {file.name}\n                    </div>\n                ))}\n            </div>\n\n        </div>\n    );\n}\n\n// function excelToJson(file) {\n//\n//\n//     let fields = [\"latitude\",\"longitude\"];\n//     let rows =[];\n//     let res;\n//     const wb = new ExcelJS.Workbook();\n//     const reader = new FileReader()\n//\n//     reader.readAsArrayBuffer(file)\n//     reader.onload = () => {\n//         const buffer = reader.result;\n//         wb.xlsx.load(buffer).then(workbook => {\n//\n//\n//             // console.log(workbook, 'workbook instance')\n//\n//             var worksheet = workbook.getWorksheet(1);\n//\n//             const additionalFields = worksheet.getRow(4).values;\n//             console.log(additionalFields);\n//\n//\n//             for(let i=7;i<additionalFields.length;i++){\n//                 fields.push(additionalFields[i].toString())\n//             }\n//\n//             // fields = fields.join(\",\")+'\\n';\n//             console.log(fields);\n//             for (let i = 5;i<worksheet.actualRowCount+2;i++){\n//\n//                 const headers =[];\n//                 let coordinates = [74.573650 + Number(i), 55.109332+Number(i)];\n//                 let row = worksheet.getRow(i).values;\n//\n//\n//                 for(let j =7; j<worksheet.actualColumnCount+1;j++){\n//                     if (row[j]){\n//                         headers.push(Number(row[j]))\n//                     }else{\n//\n//                         headers.push(0)\n//                     }\n//                 }\n//\n//                 let r = (coordinates.concat(headers)).join(\",\");\n//                 rows.push(r)\n//             }\n//             res = fields+'\\n'+rows.join( '\\n');\n//             console.log(res);\n//             // console.log(processCsvData(res));\n//\n//             // workbook.eachSheet((sheet, id) => {\n//             //     sheet.eachRow((row, rowIndex) => {\n//             //         console.log(row.values, rowIndex)\n//             //     })\n//             // })\n//\n//\n//\n//\n//             return(processCsvData(res))\n//         })\n//     }\n//\n//\n//     return(processCsvData(res))\n// }\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var map = {\n\t\"./\": 44,\n\t\"./ca\": 593,\n\t\"./ca.js\": 593,\n\t\"./cn\": 594,\n\t\"./cn.js\": 594,\n\t\"./en\": 428,\n\t\"./en.js\": 428,\n\t\"./es\": 595,\n\t\"./es.js\": 595,\n\t\"./fi\": 596,\n\t\"./fi.js\": 596,\n\t\"./formatted-message\": 429,\n\t\"./formatted-message.js\": 429,\n\t\"./index\": 44,\n\t\"./index.js\": 44,\n\t\"./ja\": 597,\n\t\"./ja.js\": 597,\n\t\"./locales\": 120,\n\t\"./locales.js\": 120,\n\t\"./pt\": 598,\n\t\"./pt.js\": 598,\n\t\"./ru\": 599,\n\t\"./ru.js\": 599\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 980;"],"sourceRoot":""}